# main.py

import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', "7528268046:AAHk9nL55UUflfZg0RXHvKM149JdX76vGwQ")

# üéÆ –ò–º–ø–æ—Ä—Ç—ã –∏–≥—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from black_white import start_black_white, stop_black_white, rules_black_white, button_handler_black_white
    from double_pig import start_double_pig, stop_double_pig, rules_double_pig, button_handler_double_pig

    logger.info("‚úÖ –í—Å–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–≥—Ä: {e}")


    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    async def game_stub(*args, **kwargs):
        await args[0].message.reply_text("‚ö†Ô∏è –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


    start_black_white = stop_black_white = rules_black_white = button_handler_black_white = game_stub
    start_double_pig = stop_double_pig = rules_double_pig = button_handler_double_pig = game_stub

# üìä –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä
active_games = {}


# üóëÔ∏è –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def _auto_delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int = 8):
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass


# üéØ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [
            [InlineKeyboardButton("–ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ", callback_data="select_game:black_white")],
            [InlineKeyboardButton("–î–≤–æ–π–Ω–∞—è —Å–≤–∏–Ω–∫–∞", callback_data="select_game:double_pig")],
        ]
        await update.message.reply_text(
            "üé≤ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat.id
        data = query.data

        # –í—ã–±–æ—Ä –∏–≥—Ä—ã
        if data.startswith("select_game:"):
            game_type = data.split(":", 1)[1]
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            except Exception:
                pass

            if game_type == "black_white":
                active_games[chat_id] = "black_white"
                await start_black_white(update, context)
            elif game_type == "double_pig":
                active_games[chat_id] = "double_pig"
                await start_double_pig(update, context)
            return

        # –ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
        if chat_id in active_games:
            current_game = active_games[chat_id]
            if current_game == "black_white" and data.startswith("bw_"):
                await button_handler_black_white(update, context)
                return
            elif current_game == "double_pig" and data.startswith("dp_"):
                await button_handler_double_pig(update, context)
                return

        await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")


# ‚èπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        if chat_id in active_games:
            game_type = active_games[chat_id]
            if game_type == "black_white":
                await stop_black_white(update, context)
            elif game_type == "double_pig":
                await stop_double_pig(update, context)
            del active_games[chat_id]
            logger.info(f"‚èπÔ∏è –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}")
        else:
            msg = await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /stop: {e}")


# üìñ –ö–æ–º–∞–Ω–¥–∞ /rules
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        if chat_id in active_games:
            game_type = active_games[chat_id]
            if game_type == "black_white":
                await rules_black_white(update, context)
            elif game_type == "double_pig":
                await rules_double_pig(update, context)
        else:
            msg = await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /rules: {e}")


# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def post_init(application):
    try:
        await application.bot.set_my_commands([
            BotCommand("start", "–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É"),
            BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"),
            BotCommand("rules", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"),
        ])
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        logger.info("üé≤ –ó–∞–ø—É—Å–∫–∞—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stop", stop))
        app.add_handler(CommandHandler("rules", rules))
        app.add_handler(CallbackQueryHandler(button_handler))

        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Webhook –Ω–∞ Railway
        PORT = int(os.environ.get("PORT", 8000))

        # –ü–æ–ª—É—á–∞–µ–º URL Railway –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        RAILWAY_STATIC_URL = os.environ.get("RAILWAY_STATIC_URL", "")
        RAILWAY_PUBLIC_DOMAIN = os.environ.get("RAILWAY_PUBLIC_DOMAIN", "")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
        railway_url = RAILWAY_STATIC_URL or RAILWAY_PUBLIC_DOMAIN

        if railway_url:
            # –†–µ–∂–∏–º Railway (Webhook)
            webhook_url = f"https://{railway_url}/{TOKEN}"
            await app.bot.set_webhook(url=webhook_url)

            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            await app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=TOKEN,
                webhook_url=webhook_url,
                drop_pending_updates=True
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ URL Railway, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            logger.info("üö® –ù–µ –Ω–∞–π–¥–µ–Ω Railway URL, –∑–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω–µ—Ç webhook URL
            logger.error("‚ùå –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Railway URL")
            return

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
        raise


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
    asyncio.run(main())