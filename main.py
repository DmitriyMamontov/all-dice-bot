# main.py

import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

from black_white import start_black_white, stop_black_white, rules_black_white, button_handler_black_white
from double_pig import start_double_pig, stop_double_pig, rules_double_pig, button_handler_double_pig

# üîë –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', "7528268046:AAHk9nL55UUflfZg0RXHvKM149JdX76vGwQ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()  # –í–∞–∂–Ω–æ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞!
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–∞–∫–∞—è –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —á–∞—Ç–µ
active_games = {}  # chat_id -> "black_white" or "double_pig"


async def _auto_delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int = 8):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥."""
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≤—ã–±–æ—Ä –∏–≥—Ä—ã"""
    keyboard = [
        [InlineKeyboardButton("–ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ", callback_data="select_game:black_white")],
        [InlineKeyboardButton("–î–≤–æ–π–Ω–∞—è —Å–≤–∏–Ω–∫–∞", callback_data="select_game:double_pig")],
    ]
    msg = await update.message.reply_text(
        "üé≤ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    data = query.data

    # === –í—ã–±–æ—Ä –∏–≥—Ä—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
    if data.startswith("select_game:"):
        game_type = data.split(":", 1)[1]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä—ã
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except Exception:
            pass

        if game_type == "black_white":
            active_games[chat_id] = "black_white"
            await start_black_white(update, context)
        elif game_type == "double_pig":
            active_games[chat_id] = "double_pig"
            await start_double_pig(update, context)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞.", show_alert=True)
        return

    # === –ü–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É ===
    if chat_id in active_games:
        current_game = active_games[chat_id]

        if current_game == "black_white":
            if any(data.startswith(prefix) for prefix in ["bw_", "delete_rules"]):
                await button_handler_black_white(update, context)
                return

        elif current_game == "double_pig":
            if any(data.startswith(prefix) for prefix in ["dp_", "delete_rules"]):
                await button_handler_double_pig(update, context)
                return

        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ.", show_alert=True)
        return

    await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    chat_id = update.effective_chat.id
    if chat_id in active_games:
        game_type = active_games[chat_id]
        if game_type == "black_white":
            await stop_black_white(update, context)
        elif game_type == "double_pig":
            await stop_double_pig(update, context)
        del active_games[chat_id]
    else:
        msg = await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))


async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /rules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    chat_id = update.effective_chat.id
    if chat_id in active_games:
        game_type = active_games[chat_id]
        if game_type == "black_white":
            await rules_black_white(update, context)
        elif game_type == "double_pig":
            await rules_double_pig(update, context)
    else:
        msg = await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))


async def post_init(application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        await application.bot.set_my_commands([
            BotCommand("start", "–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É"),
            BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"),
            BotCommand("rules", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"),
        ])
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å post_init
        app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stop", stop))
        app.add_handler(CommandHandler("rules", rules))
        app.add_handler(CallbackQueryHandler(button_handler))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üé≤ –ó–∞–ø—É—Å–∫–∞—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
        app.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()