# black_white.py

import logging
import random
import asyncio
import time
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

_games = {}
_last_edit_time = {}


async def _auto_delete_message(context, chat_id, message_id, delay=8):
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass


async def _safe_edit_message(context, chat_id, message_id, text, reply_markup=None, parse_mode="Markdown"):
    now = time.time()
    last = _last_edit_time.get(chat_id, 0)
    wait_min = 1.5
    if now - last < wait_min:
        await asyncio.sleep(wait_min - (now - last))
    _last_edit_time[chat_id] = time.time()

    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        err = str(e)
        if "Message is not modified" in err:
            logger.debug("safe_edit_message: no changes ‚Äî skipped.")
            return
        if "Too Many Requests" in err or "Flood control" in err or "retry after" in err:
            retry = 2
            m = re.search(r"retry ?after\s*(\d+)", err, re.IGNORECASE)
            if m:
                try:
                    retry = int(m.group(1)) + 1
                except Exception:
                    retry = 2
            logger.warning(f"safe_edit_message: Flood control ({err}). –ñ–¥—ë–º {retry}s –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await asyncio.sleep(retry)
            try:
                msg = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                except Exception:
                    pass
                if chat_id in _games:
                    _games[chat_id]["main_message_id"] = msg.message_id
            except Exception as e2:
                logger.error(f"safe_edit_message: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
        else:
            logger.error(f"safe_edit_message: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def _update_lobby(chat_id, context):
    game = _games[chat_id]
    players = "\n".join(f"üë§ {p['username']}" for p in game["players"].values()) or "‚Äî"
    text = f"üé≤ *–ò–≥—Ä–∞: –ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ*\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(game['players'])}):\n{players}"

    if len(game["players"]) >= 2:
        keyboard = [
            [InlineKeyboardButton(f"{i} —Ä–∞—É–Ω–¥–∞", callback_data=f"bw_set_rounds_{i}") for i in range(2, 5)],
            [InlineKeyboardButton(f"{i} —Ä–∞—É–Ω–¥–æ–≤", callback_data=f"bw_set_rounds_{i}") for i in range(5, 7)],
            [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üé≤", callback_data="bw_join")],
            [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")],
        ]

    await _safe_edit_message(context, chat_id, game["main_message_id"], text, InlineKeyboardMarkup(keyboard))


async def _update_dice_selection(chat_id, context):
    game = _games[chat_id]
    text = f"üé≤ –í—ã–±—Ä–∞–Ω–æ {game['rounds_total']} —Ä–∞—É–Ω–¥–æ–≤.\n\n*–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–≥—Ä—ã:*"
    keyboard = [
        [InlineKeyboardButton("4 –∫—É–±–∏–∫–∞ (2‚ö™ + 2‚ö´)", callback_data="bw_set_dice_4")],
        [InlineKeyboardButton("6 –∫—É–±–∏–∫–æ–≤ (3‚ö™ + 3‚ö´)", callback_data="bw_set_dice_6")],
        [InlineKeyboardButton("8 –∫—É–±–∏–∫–æ–≤ (4‚ö™ + 4‚ö´)", callback_data="bw_set_dice_8")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")],
    ]
    await _safe_edit_message(context, chat_id, game["main_message_id"], text, InlineKeyboardMarkup(keyboard))


async def _start_round(chat_id, context):
    game = _games[chat_id]
    for p in game["players"].values():
        p["has_played_this_round"] = False
        p["last_roll"] = None
        p["pending_draw"] = None

    dc = game["dice_count"]
    game["round_dice_pool"] = ["white"]*(dc//2) + ["black"]*(dc//2)
    await _update_board(chat_id, context)


async def _update_board(chat_id, context):
    game = _games[chat_id]
    if not game.get("current_player"):
        if game.get("turn_order"):
            game["current_player"] = game["turn_order"][0]
        else:
            return

    current_player_id = game["current_player"]
    current_player_name = _games[chat_id]["players"][current_player_id]["username"]

    history_lines = []
    for rnd in range(1, game["current_round"] + 1):
        if rnd in game["round_history"] and game["round_history"][rnd]:
            history_lines.append(f"\n*–†–∞—É–Ω–¥ {rnd}:*")
            for throw in game["round_history"][rnd]:
                dice_emojis = "".join("‚ö™" if d == "white" else "‚ö´" for d in throw["dice"])
                values_str = ", ".join(map(str, throw["values"]))
                sign = "+" if throw["result"] >= 0 else ""
                history_lines.append(f"üë§ {throw['player']} –±—Ä–æ—Å–∏–ª {dice_emojis} ({values_str}) ‚Üí {sign}{throw['result']}")

    players_status = []
    for pid, p in game["players"].items():
        status = "‚úÖ" if p["has_played_this_round"] else ("‚û°Ô∏è" if pid == current_player_id else "‚è≥")
        diff = p["white_total"] - p["black_total"]
        players_status.append(f"{status} {p['username']}: ‚ö™{p['white_total']} ‚ö´{p['black_total']} ‚û°Ô∏è {diff}")

    text = (
        f"üé≤ *–†–∞—É–Ω–¥ {game['current_round']} –∏–∑ {game['rounds_total']}*\n"
        f"–•–æ–¥: {current_player_name}\n\n"
        "–û–±—â–∏–π —Å—á—ë—Ç:\n" + "\n".join(players_status) +
        ("\n\n*–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤:*" + "\n".join(history_lines) if history_lines else "")
    )

    player = game["players"][current_player_id]
    if not player["has_played_this_round"]:
        if player.get("pending_draw") is not None:
            keyboard = [
                [InlineKeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ üéØ", callback_data="bw_roll")],
                [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")],
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("–¢—è–Ω—É—Ç—å –∫—É–±–∏–∫–∏ üé≤", callback_data="bw_draw")],
                [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")],
            ]
    else:
        keyboard = [[InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")]]

    await _safe_edit_message(context, chat_id, game["main_message_id"], text, InlineKeyboardMarkup(keyboard))


async def _show_final_results(chat_id, context):
    game = _games[chat_id]
    players = list(game["players"].values())
    players.sort(key=lambda p: (p["white_total"] - p["black_total"], p["white_total"]), reverse=True)

    history_lines = []
    for rnd in range(1, game["rounds_total"] + 1):
        if rnd in game["round_history"] and game["round_history"][rnd]:
            history_lines.append(f"*–†–∞—É–Ω–¥ {rnd}:*")
            for throw in game["round_history"][rnd]:
                dice_emojis = "".join("‚ö™" if d == "white" else "‚ö´" for d in throw["dice"])
                values_str = ", ".join(map(str, throw["values"]))
                sign = "+" if throw["result"] >= 0 else ""
                history_lines.append(f"üë§ {throw['player']} –±—Ä–æ—Å–∏–ª {dice_emojis} ({values_str}) ‚Üí {sign}{throw['result']}")
            history_lines.append("")

    table_lines = []
    for i, p in enumerate(players):
        diff = p["white_total"] - p["black_total"]
        medal = ["ü•á", "ü•à", "ü•â"][i] if i < 3 else ""
        table_lines.append(f"{medal} {p['username']}: ‚ö™{p['white_total']} ‚ö´{p['black_total']} ‚û°Ô∏è {diff}")

    winner = players[0]["username"] if players else "‚Äî"
    text = (
        "üèÜ *–§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò* üèÜ\n\n"
        + ("\n".join(history_lines) + "\n" if history_lines else "")
        + "\n*–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
        + "\n".join(table_lines)
        + f"\n\nüéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: *{winner}*!"
    )

    keyboard = [
        [InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞ üîÑ", callback_data="bw_new_game")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É üéÆ", callback_data="bw_switch_game")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="bw_show_rules")],
    ]

    await _safe_edit_message(context, chat_id, game["main_message_id"], text, InlineKeyboardMarkup(keyboard))
    game["phase"] = "finished"


async def _rules_message(chat_id, context):
    text = (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ¬´–ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ¬ª:*\n\n"
        "‚ñ´Ô∏è –í –∫–æ—Ä–æ–±–∫–µ –∫—É–±–∏–∫–∏ ‚ö™ –∏ ‚ö´ (–±–µ–ª—ã–µ = +, —á—ë—Ä–Ω—ã–µ = -).\n"
        "‚ñ´Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 4 (2‚ö™+2‚ö´), 6 (3‚ö™+3‚ö´) –∏–ª–∏ 8 (4‚ö™+4‚ö´) –∫—É–±–∏–∫–æ–≤.\n"
        "‚ñ´Ô∏è –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Ç—è–Ω–µ—Ç –ø–æ–ª–æ–≤–∏–Ω—É –∫—É–±–∏–∫–æ–≤.\n"
        "‚ñ´Ô∏è –í—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞—é—Ç—Å—è –æ—Å—Ç–∞–≤—à–∏–µ—Å—è.\n"
        "‚ñ´Ô∏è –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ >2 ‚Äî –∫–∞–∂–¥—ã–π —Ç—è–Ω–µ—Ç –¥–æ 2 –∫—É–±–∏–∫–æ–≤.\n"
        "‚ñ´Ô∏è –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–∏—Ü–∞ ‚ö™ ‚àí ‚ö´."
    )
    keyboard = [[InlineKeyboardButton("–Ø –ø—Ä–æ—á–∏—Ç–∞–ª ‚úÖ", callback_data="bw_delete_rules")]]
    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


# === –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message –≤–º–µ—Å—Ç–æ reply_text ===
async def start_black_white(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in _games:
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text="–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! /stop —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )
        asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))
        return

    lock = asyncio.Lock()
    _games[chat_id] = {
        "players": {},
        "rounds_total": None,
        "dice_count": None,
        "current_round": 1,
        "main_message_id": None,
        "current_player": None,
        "turn_order": [],
        "phase": "lobby",
        "round_history": {},
        "round_dice_pool": [],
        "pending_draw": None,
        "lock": lock,
    }

    keyboard = [[InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üé≤", callback_data="bw_join")]]
    msg = await context.bot.send_message(
        chat_id=chat_id,
        text="üé≤ *–ò–≥—Ä–∞: –ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ*\n\n–ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤!\n–ú–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )
    _games[chat_id]["main_message_id"] = msg.message_id


async def stop_black_white(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in _games:
        del _games[chat_id]
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text="üõë –ò–≥—Ä–∞ ¬´–ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        )
        asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))
    else:
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã ¬´–ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ¬ª."
        )
        asyncio.create_task(_auto_delete_message(context, chat_id, msg.message_id))


async def rules_black_white(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _rules_message(update.effective_chat.id, context)


async def button_handler_black_white(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user = query.from_user
    user_id = user.id
    username = user.username or user.first_name

    if query.data == "bw_delete_rules":
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
        return

    if chat_id not in _games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    game = _games[chat_id]
    lock = game["lock"]

    async def _handle_draw():
        pool = game["round_dice_pool"]
        n_players = len(game["turn_order"]) if game.get("turn_order") else len(game["players"])

        if n_players == 2:
            half = game["dice_count"] // 2
            first_player_turn = not any(p["has_played_this_round"] for p in game["players"].values())
            if first_player_turn:
                if len(pool) < half:
                    dc = game["dice_count"]
                    game["round_dice_pool"] = ["white"]*(dc//2) + ["black"]*(dc//2)
                    await _update_board(chat_id, context)
                    await query.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞.", show_alert=True)
                    return
                chosen = random.sample(pool, half)
                for c in chosen:
                    pool.remove(c)
                game["round_dice_pool"] = pool
            else:
                chosen = pool[:]
                game["round_dice_pool"] = []
        else:
            draw_count = min(2, len(pool))
            if draw_count == 0:
                dc = game["dice_count"]
                game["round_dice_pool"] = ["white"]*(dc//2) + ["black"]*(dc//2)
                for p in game["players"].values():
                    p["has_played_this_round"] = False
                    p["pending_draw"] = None
                await _update_board(chat_id, context)
                await query.answer("–ö—É–±–∏–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞.", show_alert=True)
                return
            chosen = random.sample(pool, draw_count)
            for c in chosen:
                pool.remove(c)
            game["round_dice_pool"] = pool

        player = game["players"][user_id]
        player["pending_draw"] = chosen
        game["pending_draw"] = chosen
        await _update_board(chat_id, context)
        await query.answer("–ö—É–±–∏–∫–∏ –≤—ã—Ç—è–Ω—É—Ç—ã ‚Äî –Ω–∞–∂–º–∏ '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏' üéØ", show_alert=False)

    async def _handle_roll():
        player = game["players"][user_id]
        chosen = player.get("pending_draw") or game.get("pending_draw")
        if not chosen:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã—Ç—è–Ω–∏ –∫—É–±–∏–∫–∏!", show_alert=True)
            await _update_board(chat_id, context)
            return

        player["pending_draw"] = None
        game["pending_draw"] = None

        values = [random.randint(1, 6) for _ in chosen]
        white_sum = sum(v for v, c in zip(values, chosen) if c == "white")
        black_sum = sum(v for v, c in zip(values, chosen) if c == "black")
        total_result = white_sum - black_sum

        player.update({
            "white_total": player["white_total"] + white_sum,
            "black_total": player["black_total"] + black_sum,
            "score": player["score"] + total_result,
            "has_played_this_round": True,
            "last_roll": {"dice": chosen, "values": values, "result": total_result},
            "history": player.get("history", []) + [total_result],
        })

        game["round_history"].setdefault(game["current_round"], []).append({
            "player": player["username"],
            "dice": chosen,
            "values": values,
            "result": total_result,
        })

        await _update_board(chat_id, context)

        played_count = sum(1 for p in game["players"].values() if p["has_played_this_round"])
        if played_count < len(game["players"]):
            idx = game["turn_order"].index(user_id)
            next_idx = (idx + 1) % len(game["turn_order"])
            game["current_player"] = game["turn_order"][next_idx]
            await asyncio.sleep(0.05)
            await _update_board(chat_id, context)
        else:
            if game["current_round"] >= game["rounds_total"]:
                await asyncio.sleep(1.2)
                await _show_final_results(chat_id, context)
            else:
                game["current_round"] += 1
                for p in game["players"].values():
                    p["has_played_this_round"] = False
                    p["last_roll"] = None
                    p["pending_draw"] = None
                dc = game["dice_count"]
                game["round_dice_pool"] = ["white"]*(dc//2) + ["black"]*(dc//2)
                game["turn_order"].append(game["turn_order"].pop(0))
                game["current_player"] = game["turn_order"][0]
                await _start_round(chat_id, context)

    if query.data == "bw_join":
        async with lock:
            if game["phase"] != "lobby":
                await query.answer("–õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ!", show_alert=True)
                return
            if user_id in game["players"]:
                await query.answer("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
                return
            game["players"][user_id] = {
                "username": username,
                "white_total": 0,
                "black_total": 0,
                "score": 0,
                "has_played_this_round": False,
                "last_roll": None,
                "history": [],
                "pending_draw": None,
            }
            await _update_lobby(chat_id, context)
            await query.answer(f"‚úÖ {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!")

    elif query.data.startswith("bw_set_rounds_"):
        async with lock:
            if game["phase"] != "lobby":
                await query.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ä–∞—É–Ω–¥—ã —Å–µ–π—á–∞—Å!", show_alert=True)
                return
            rounds = int(query.data.split("_")[-1])
            if not (2 <= rounds <= 20):
                await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤!", show_alert=True)
                return
            game["rounds_total"] = rounds
            game["phase"] = "choose_dice"
            await _update_dice_selection(chat_id, context)

    elif query.data.startswith("bw_set_dice_"):
        async with lock:
            if game["phase"] != "choose_dice":
                await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤!", show_alert=True)
                return
            dice_count = int(query.data.split("_")[-1])
            if dice_count not in (4, 6, 8):
                await query.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç!", show_alert=True)
                return
            game["dice_count"] = dice_count
            game["phase"] = "playing"
            game["turn_order"] = list(game["players"].keys())
            random.shuffle(game["turn_order"])
            game["current_player"] = game["turn_order"][0]
            game["current_round"] = 1
            game["round_history"] = {i: [] for i in range(1, game["rounds_total"] + 1)}
            await _start_round(chat_id, context)

    elif query.data == "bw_draw":
        async with lock:
            if user_id != game["current_player"]:
                await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!", show_alert=True)
                return
            if game["players"][user_id]["has_played_this_round"]:
                await query.answer("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥!", show_alert=True)
                return
            await _handle_draw()

    elif query.data == "bw_roll":
        async with lock:
            if user_id != game["current_player"]:
                await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!", show_alert=True)
                return
            if game["players"][user_id]["has_played_this_round"]:
                await query.answer("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥!", show_alert=True)
                return
            await _handle_roll()

    elif query.data == "bw_show_rules":
        await _rules_message(chat_id, context)

    elif query.data == "bw_new_game":
        async with lock:
            _games[chat_id] = {
                "players": {},
                "rounds_total": None,
                "dice_count": None,
                "current_round": 1,
                "main_message_id": game["main_message_id"],
                "current_player": None,
                "turn_order": [],
                "phase": "lobby",
                "round_history": {},
                "round_dice_pool": [],
                "pending_draw": None,
                "lock": lock,
            }
            keyboard = [[InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üé≤", callback_data="bw_join")]]
            text = "üé≤ *–ò–≥—Ä–∞: –ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ*\n\n–ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤!\n–ú–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞."
            try:
                await _safe_edit_message(context, chat_id, game["main_message_id"], text, InlineKeyboardMarkup(keyboard))
            except Exception:
                msg = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
                _games[chat_id]["main_message_id"] = msg.message_id
            await query.answer("–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!", show_alert=False)

    elif query.data == "bw_switch_game":
        if chat_id in _games:
            del _games[chat_id]
        keyboard = [
            [InlineKeyboardButton("–ß—ë—Ä–Ω—ã–µ-–ë–µ–ª—ã–µ", callback_data="select_game:black_white")],
            [InlineKeyboardButton("–î–≤–æ–π–Ω–∞—è —Å–≤–∏–Ω–∫–∞", callback_data="select_game:double_pig")],
        ]
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé≤ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        await query.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã", show_alert=False)

    else:
        return